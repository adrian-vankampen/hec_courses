#pointsize = 2,     #
addEllipses = TRUE # Adds ellipses
)
fviz_pca_biplot(pca1,
fill.ind = type,
geom.ind = "point",
# col.ind = "black",
pointshape = 21,
pointsize = 2,     #
addEllipses = TRUE # Adds ellipses
)
fviz_pca_biplot(pca1,
fill.ind = type,
geom.ind = "point",
col.ind = "black",
pointshape = 21,
pointsize = 2,     #
addEllipses = TRUE # Adds ellipses
)
fviz_pca_biplot(pca1,
fill.ind = type,
geom.ind = "point",
# col.ind = "black",
pointshape = 21,
pointsize = 2,     #
addEllipses = TRUE # Adds ellipses
)
?FactoMineR
?factanal
#
# d.
#
factanal(data1, factors = 2)
#
# d.
#
factanal(data1[-1], factors = 2)
factanal(data1[-1], factors = 2, rotation = "varimax")
#
# d.
#
factanal(data1[-1], factors = 2, roatation = NULL) # Explains 71% of variance... which is not bad
factanal(data1[-1], factors = 3, roatation = NULL) # Explains 71% of variance... p-value is very low, so let's try more...
factanal(data1[-1], factors = 4, roatation = NULL) # and more...
factanal(data1[-1], factors = 5, roatation = NULL) # and more...
factanal(data1[-1], factors = 5, rotation = "varimax") # -> it doesn't change anything
plot(unrot)
unrot <- factanal(data1[-1], factors = 5, roatation = NULL) # Finally a p-value of 0.172, explains 82% of variance
plot(unrot)
print(unrot)
#
# d.
#
factanal(data1[-1], factors = 2, rotation = NULL) # Explains 71% of variance... p-value is very low, so let's try more...
factanal(data1[-1], factors = 2) # Explains 71% of variance... p-value is very low, so let's try more...
factanal(data1[-1], factors = 3) # and more...
factanal(data1[-1], factors = 4) # and still more...
unrot <- factanal(data1[-1], factors = 5) # Finally a p-value of 0.172, explains 82% of variance
print(unrot)
rot <- factanal(data1[-1], factors = 5, rotation = "varimax") # -> it doesn't change anything
print(rot)
factanal(data1[-1], factors = 2) # Explains 71% of variance... p-value is very low, so let's try more...
factanal(data1[-1], factors = 3) # and more...
factanal(data1[-1], factors = 4) # and still more...
unrot <- factanal(data1[-1], factors = 5) # Finally a p-value of 0.172, explains 82% of variance
print(unrot)
rot <- factanal(data1[-1], factors = 5, rotation = "varimax") # -> it doesn't change anything
print(rot)
promax <- factanal(data[-1], factors=5, rotation = "promax")
promax <- factanal(data1[-1], factors=5, rotation = "promax")
print(promax)
detach(data1)
#
data1 <- read.csv("Service.csv")
attach(data2)
#
data2 <- read.csv("Service.csv")
attach(data2)
rm(data1)
# Week 4
#
# Exercise 2
#
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(corrplot)
#
setwd("~/HEC/4e année (MScM-BA)/1st semester/01. Quantitative Methods for Management/02. Exercices 2020/Week_4_FactorAnalysis")
#
data2 <- read.csv("Service.csv")
attach(data2)
#
data2 <- read.csv("Service.csv")
attach(data2)
#
# a.
#
cormat <- cor(as.matrix(data2)
print(cormat)
#
# a.
#
cormat <- cor(as.matrix(data2))
print(cormat)
ggcorrplot(cormat)
# Week 4
#
# Exercise 2
#
library(ggcorrplot)
install.packages("ggcorrplot")
# Week 4
#
# Exercise 2
#
library(ggcorrplot)
ggcorrplot(cormat)
ggcorrplot(cormat, method="circle")
?ggcorrplot
ggcorrplot(cormat, method="circle", lab = TRUE)
ggcorrplot(cormat, method="circle")
ggcorrplot(cormat, method="circle", p.mat = p.mat)
ggcorrplot(cormat, method="circle", p.mat = cormat)
ggcorrplot(cormat, method="circle")
ggcorrplot(cormat)
corrplot(cormat)
corrplot(cormat, method = "color")
#
# b.
#
pca1 <- PCA(data2)
print(pca1)
pca1
summary(pca1)
fviz_pca_biplot(data2)
#
# b.
#
pca2 <- PCA(data2)
summary(pca2)
fviz_pca_biplot(pca2)
pca2$eig
factanal(data2, factors=3)
factanal(data2, factors=4)
factanal(data2, factors=5)
factanal(data2, factors=6)
factanal(data2, factors=7)
factanal(data2, factors=8)
fact_anal <- factanal(data2, factors=8)
View(fact_anal)
fact_anal_it <- factanal(data2, factors=3)
View(fact_anal_it)
fact_anal_it
fact_anal_it["PVAL"]
fact_anal_it["PVAL", ]
s <- fact_anal_it["PVAL"]
s
s <- fact_anal_it$PVAL[1]
s
s <- fact_anal_it$PVAL[2]
s
s <- fact_anal_it$PVAL[1]
s
value(s)
s < 1
length(data2)
fact_analyze <- function(data,
alpha = 0.05,
fact_nb = 2) {
fact_anal_it <- factanal(data, factors = fact_nb)
while (fact_anal_it$PVAL[1] < alpha) {
fact_nb <- fact_nb + 1
if (fact_nb > length(data)) return(fact_anal_it)
fact_analy_it <- factanal(data2, factors = fact_nb)
}
return(fact_anal_it)
}
fact_analyze(data2)
fact_analyze(data2, fact_nb = 3)
fact_analyze <- function(data,
alpha = 0.05,
nfact = 2) {
fact_anal_it <- factanal(data, factors = nfact)
while (fact_anal_it$PVAL[1] < alpha) {
nfact <- nfact + 1
if (nfact > length(data)) return(fact_anal_it)
fact_anal_it <- factanal(data2, factors = fact_nb)
}
return(fact_anal_it)
}
fact_analyze(data2, fact_nb = 3)
fact_analyze(data2, nfact = 3)
fact_analyze <- function(data,
alpha = 0.05,
nfact = 2) {
fact_anal_it <- factanal(data, factors = nfact)
while (fact_anal_it$PVAL[1] < alpha) {
nfact <- nfact + 1
if (nfact > length(data)) return(fact_anal_it)
fact_anal_it <- factanal(data2, factors = nfact)
}
return(fact_anal_it)
}
fact_analyze(data2, nfact = 3)
fact_analyze <- function(data,
alpha = 0.05,
nfact = 2,
rotation = "") {
fact_anal_it <- factanal(data, factors = nfact, rotation = rotation)
while (fact_anal_it$PVAL[1] < alpha) {
nfact <- nfact + 1
if (nfact > length(data)) return(fact_anal_it)
fact_anal_it <- factanal(data2, factors = nfact, rotation = rotation)
}
return(fact_anal_it)
}
fact_analyze(data2, nfact = 3)
fact_analyze <- function(data,
alpha = 0.05,
nfact = 2,
rotation) {
fact_anal_it <- factanal(data, factors = nfact, rotation = rotation)
while (fact_anal_it$PVAL[1] < alpha) {
nfact <- nfact + 1
if (nfact > length(data)) return(fact_anal_it)
fact_anal_it <- factanal(data2, factors = nfact, rotation)
}
return(fact_anal_it)
}
fact_analyze <- function(data,
alpha = 0.05,
nfact = 2,
rotation) {
fact_anal_it <- factanal(data, factors = nfact, rotation = rotation)
while (fact_anal_it$PVAL[1] < alpha) {
nfact <- nfact + 1
if (nfact > length(data)) return(fact_anal_it)
fact_anal_it <- factanal(data2, factors = nfact, rotation)
}
return(fact_anal_it)
}
fact_analyze(data2, nfact = 3)
?factanal
fact_analyze <- function(data,
alpha = 0.05,
nfact = 2,
rotation = "none") {
fact_anal_it <- factanal(data, factors = nfact, rotation = rotation)
while (fact_anal_it$PVAL[1] < alpha) {
nfact <- nfact + 1
if (nfact > length(data)) return(fact_anal_it)
fact_anal_it <- factanal(data2, factors = nfact, rotation)
}
return(fact_anal_it)
}
fact_analyze(data2, nfact = 3)
unrot.analysis <- fact_analyze(data2, nfact = 3)
print(unrot.analysis)
# Week 4
#
# Exercise 2
#
library(ggcorrplot)
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(corrplot)
#
setwd(
"~/HEC/4e année (MScM-BA)/1st semester/01. Quantitative Methods for Management/02. Exercices 2020/Week_4_FactorAnalysis"
)
#
data2 <- read.csv("Service.csv")
attach(data2)
#
# a.
#
cormat <- cor(as.matrix(data2))
ggcorrplot(cormat)
corrplot(cormat, method = "color")
#
# b.
#
pca2 <- PCA(data2)
summary(pca2)
pca2$eig           # -> according to the K-G rule : 3 factors
fact_analyze <- function(data,
alpha = 0.05,
nfact = 2,
rotation = "none") {
fact_anal_it <- factanal(data, factors = nfact, rotation = rotation)
while (fact_anal_it$PVAL[1] < alpha) {
nfact <- nfact + 1
if (nfact > length(data))
return(fact_anal_it)
fact_anal_it <- factanal(data2, factors = nfact, rotation)
}
return(fact_anal_it)
}
unrot.analysis <- fact_analyze(data2, nfact = 3)
print(unrot.analysis)
unrot.analysis <- fact_analyze(data2, alpha = 0.1, nfact = 3)
print(unrot.analysis)
unrot.analysis <- fact_analyze(data2, alpha = 0.01, nfact = 3)
print(unrot.analysis)
unrot.analysis <- fact_analyze(data2, alpha = 0.01)
print(unrot.analysis)
unrot.analysis.chisq <- fact_analyze(data2, alpha = 0.05)
print(unrot.analysis)
unrot.analysis.chisq <- fact_analyze(data2, alpha = 0.1)
print(unrot.analysis)
print(unrot.analysis)
unrot.analysis.chisq <- fact_analyze(data2, alpha = 0.1)
print(unrot.analysis)
unrot.analysis <- factanal(data2, factors=3)
print(unrot.analysis)
#
# d.
#
rot.analysis.chisq <- fact_analyze(data2, rotation = "varimax")
print(rot.analysis.chisq)
print(unrot.analysis) # 10 factors ! But it's a bit too much, so based on K-G rule, 3 factors
unrot.analysis.chisq <- fact_analyze(data2, alpha = 0.1) # Explains
print(unrot.analysis.chisq) # 10 factors ! But it's a bit too much, so based on K-G rule, 3 factors
print(rot.analysis.chisq)
promax.analysis.chisq <- fact_analyze(data2, rotation = "promax")
print(promax.analysis.chisq)
print(rot.analysis.chisq)
unrot.analysis <- factanal(data2, factors=3)
print(unrot.analysis) # -> already explains 78.1% of variance
unrot.analysis.chisq <- fact_analyze(data2, alpha = 0.1) # Explains 88.7 % of variance
print(unrot.analysis.chisq) # 10 factors ! But it's a bit too much, so based on K-G rule, 3 factors
unrot.analysis.KG <- factanal(data2, factors=3)
print(unrot.analysis.KG) # -> already explains 78.1% of variance
#
# Using Kaiser-Gutman's rule
#
rot.analysis.KG <- factanal(data2, factors=3, rotation = "varimax") # No change
print(rot.analysis.KG)
print(unrot.analysis.KG) # -> already explains 78.1% of variance
print(rot.analysis.KG)
promax.analysis.chisq <- fact_analyze(data2, rotation = "promax") # Also no change
promax.analysis.KG <- factanal(data2, factors=3, rotation = "promax") # Also no change
print(promax.analysis.KG)
#
# e.
#
uniq <- unrot.analysis.KG$uniquenesses
print(uniq)
print(order(uniq)[1:3])
print(order(-uniq)[1:3])
print(order(~uniq)[1:3])
print(order(~uniq)[1:3])
print(order(uniq)[1:3])
order[order(uniq)[1:3]]
order[order(-uniq)[1:3]]
uniq[order(-uniq)[1:3]]
uniq[order(uniq)[1:3]]
uniq[order(-uniq)[1:3]]
plot(uniq)
com <- 1-uniq
com[order(-com)[1:3]]
detach(data2)
rm(list=ls())
# Week 4
#
# Exercise 2
#
library(ggcorrplot)
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(corrplot)
#
setwd(
"~/HEC/4e année (MScM-BA)/1st semester/01. Quantitative Methods for Management/02. Exercices 2020/Week_4_FactorAnalysis"
)
#
data3 <- read.csv("ship3.csv")
attach(data3)
data3
typeof(data3)
str(data3)
data3.ss <- data3[str(data3)=="num"]
data3.ss
data3.ss <- data3[str(data3)==num]
data3.ss <- data3[data3[str(data3)=="num"]]
data3.ss <- data3[str(data3)=="num"]
data3.ss <- data3[str(data3)=="num"]
data3.ss
obj <- str(data3)
?str
col_num <- sapply(data3, typeof)
col_num
data3.ss <- data3[sapply(data3, typeof)=="double"]
data3.ss
data3.ss <- data3[sapply(data3, typeof)!="character"]
data3.ss
sapply(data3, typeof)
sapply(data3, class)
data3.ss <- data3[-c(1,6)
data3.ss <- data3[-c(1,6)]
data3.ss <- data3[-c(1,6)]
data3.ss
corrplot(cor(data3.ss))
pca3 <- PCA(data3.ss)
pca3
summary(pca3)
pca3$eig
fviz_pca_biplot(pca3)
fviz_pca_biplot(pca3,
addEllipses = TRUE
)
?fviz
fviz_pca_biplot(pca3,
addEllipses = TRUE
color = "black"
)
fviz_pca_biplot(pca3,
addEllipses = TRUE
color = "black"
)
fviz_pca_biplot(pca3,
addEllipses = TRUE,
color = "black"
)
fviz_pca_biplot(pca3,
addEllipses = TRUE,
color = "black"
)
?fviz_pca_biplot
fviz_pca_biplot(pca3,
geom.ind = "point",
habillage = Crisis
addEllipses = TRUE,
col.ind = "black",
)
fviz_pca_biplot(pca3,
geom.ind = "point",
habillage = Crisis
addEllipses = TRUE,
col.ind = "black"
)
fviz_pca_biplot(pca3,
geom.ind = "point",
habillage = Crisis,
addEllipses = TRUE,
col.ind = "black"
)
fviz_pca_biplot(pca3,
geom.ind = "point",
col.ind = as.factor(Crisis),
addEllipses = TRUE,
)
#
# c.
#
fact.anal3 <- factanal(data3, factors=2)
#
# c.
#
fact.anal3 <- factanal(data3.ss, factors=2)
#
# c.
#
fact.anal3 <- factanal(data3.ss, factors=1)
print(fact.anal3)
print(fact.anal3, digits=2)
detach(data3)
rm(list=ls())
#
setwd(
"~/HEC/4e année (MScM-BA)/1st semester/01. Quantitative Methods for Management/02. Exercices 2020/Week_5_Clustering"
)
#
data1 <- read.csv("Cars.csv")
attach(data1)
corrplot(cor(data1))
corrplot(cor(data1[-1]))
plot(carmodel, engine)
plot(carmodel, engine, type = "histogram")
# Week 4
#
# Exercise 2
#
library(dplyr)
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(corrplot)
#
setwd(
"~/HEC/4e année (MScM-BA)/1st semester/01. Quantitative Methods for Management/02. Exercices 2020/Week_5_Clustering"
)
#
data1 <- read.csv("Cars.csv")
attach(data1)
summary(data1)
par(mfrow = c(2,3))
boxplot(data1[, i], main = names(data[i]), type = "l")
for(i in 2:6){
boxplot(data1[, i], main = names(data[i]), type = "l")
}
par(mfrow = c(2,3))
for(i in 2:6){
boxplot(data1[, i], main = names(data1[i]), type = "l")
}
par(mfrow = c(1,1))
install.packages("blogdown")
install.packages("blogdown")
blogdown::install_hugo
